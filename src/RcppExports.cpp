// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gibbs_sampler
NumericMatrix gibbs_sampler(int n_iter, int n, double a, double b);
RcppExport SEXP _SA24204158_gibbs_sampler(SEXP n_iterSEXP, SEXP nSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_sampler(n_iter, n, a, b));
    return rcpp_result_gen;
END_RCPP
}
// dnnC
IntegerVector dnnC(const NumericMatrix& train_data, const IntegerVector& train_labels, const NumericMatrix& test_data, int s);
RcppExport SEXP _SA24204158_dnnC(SEXP train_dataSEXP, SEXP train_labelsSEXP, SEXP test_dataSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type train_data(train_dataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type train_labels(train_labelsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type test_data(test_dataSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(dnnC(train_data, train_labels, test_data, s));
    return rcpp_result_gen;
END_RCPP
}
// dnnCvC
int dnnCvC(const NumericMatrix& train_data, const IntegerVector& train_labels, const IntegerVector& s_values);
RcppExport SEXP _SA24204158_dnnCvC(SEXP train_dataSEXP, SEXP train_labelsSEXP, SEXP s_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type train_data(train_dataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type train_labels(train_labelsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type s_values(s_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(dnnCvC(train_data, train_labels, s_values));
    return rcpp_result_gen;
END_RCPP
}
// tdnnC
IntegerVector tdnnC(const NumericMatrix& train_data, const IntegerVector& train_labels, const NumericMatrix& test_data, int s1, int s2);
RcppExport SEXP _SA24204158_tdnnC(SEXP train_dataSEXP, SEXP train_labelsSEXP, SEXP test_dataSEXP, SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type train_data(train_dataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type train_labels(train_labelsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type test_data(test_dataSEXP);
    Rcpp::traits::input_parameter< int >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< int >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(tdnnC(train_data, train_labels, test_data, s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// tdnnCvC
int tdnnCvC(const NumericMatrix& train_data, const IntegerVector& train_labels, const IntegerVector& s2_values, const double c);
RcppExport SEXP _SA24204158_tdnnCvC(SEXP train_dataSEXP, SEXP train_labelsSEXP, SEXP s2_valuesSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type train_data(train_dataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type train_labels(train_labelsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type s2_values(s2_valuesSEXP);
    Rcpp::traits::input_parameter< const double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(tdnnCvC(train_data, train_labels, s2_values, c));
    return rcpp_result_gen;
END_RCPP
}
// knnC
IntegerVector knnC(const NumericMatrix& train_data, const IntegerVector& train_labels, const NumericMatrix& test_data, int k);
RcppExport SEXP _SA24204158_knnC(SEXP train_dataSEXP, SEXP train_labelsSEXP, SEXP test_dataSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type train_data(train_dataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type train_labels(train_labelsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type test_data(test_dataSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(knnC(train_data, train_labels, test_data, k));
    return rcpp_result_gen;
END_RCPP
}
// knnCvC
int knnCvC(const NumericMatrix& train_data, const IntegerVector& train_labels, const IntegerVector& k_values);
RcppExport SEXP _SA24204158_knnCvC(SEXP train_dataSEXP, SEXP train_labelsSEXP, SEXP k_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type train_data(train_dataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type train_labels(train_labelsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type k_values(k_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(knnCvC(train_data, train_labels, k_values));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SA24204158_gibbs_sampler", (DL_FUNC) &_SA24204158_gibbs_sampler, 4},
    {"_SA24204158_dnnC", (DL_FUNC) &_SA24204158_dnnC, 4},
    {"_SA24204158_dnnCvC", (DL_FUNC) &_SA24204158_dnnCvC, 3},
    {"_SA24204158_tdnnC", (DL_FUNC) &_SA24204158_tdnnC, 5},
    {"_SA24204158_tdnnCvC", (DL_FUNC) &_SA24204158_tdnnCvC, 4},
    {"_SA24204158_knnC", (DL_FUNC) &_SA24204158_knnC, 4},
    {"_SA24204158_knnCvC", (DL_FUNC) &_SA24204158_knnCvC, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_SA24204158(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
